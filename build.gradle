// Apply shadow plugin to root for availability in subprojects
buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.johnrengelman:shadow:8.1.1'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
}

// Define versions in a single place
ext {
    javaVersion = JavaVersion.VERSION_17
    
    // Library versions
    flinkVersion = '1.17.0'
    kafkaVersion = '3.4.0'
    quarkusVersion = '3.2.0.Final'
    jacksonVersion = '2.15.2'
    junitVersion = '5.9.3'
    
    // Plugin versions
    shadowVersion = '8.1.1'
    quarkusPluginVersion = quarkusVersion
}

allprojects {
    group = 'com.ververica.composable_job'
    version = '1.0.0-SNAPSHOT'
    
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    
    java {
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }
    
    // Remove deprecated configuration settings
    
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-parameters'
        options.deprecation = true
        options.warnings = true
    }
    
    tasks.withType(Test).configureEach {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
        }
    }
    
    // Common dependencies
    dependencies {
        // Logging
        implementation 'org.slf4j:slf4j-api:2.0.7'
        
        // Testing
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testImplementation 'org.mockito:mockito-core:5.3.1'
        testImplementation 'org.assertj:assertj-core:3.24.2'
    }
}

// Configure specific projects
project(':models') {
    dependencies {
        implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    }
}

project(':flink-common') {
    dependencies {
        implementation project(':models')
        implementation "org.apache.flink:flink-java:${flinkVersion}"
        implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
        implementation "org.apache.flink:flink-connector-kafka:${flinkVersion}"
    }
}

project(':flink-chat-pipeline') {
    apply plugin: 'application'
    apply plugin: 'com.github.johnrengelman.shadow'
    
    dependencies {
        implementation project(':models')
        implementation project(':flink-common')
        implementation "org.apache.flink:flink-java:${flinkVersion}"
        implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
        implementation "org.apache.flink:flink-connector-kafka:${flinkVersion}"
        implementation "org.apache.flink:flink-clients:${flinkVersion}"
    }
    
    application {
        mainClass = 'com.ververica.composable_job.flink.chat.ChatMessagePipeline'
    }
    
    shadowJar {
        archiveClassifier.set('all')
        mergeServiceFiles()
    }
}

project(':flink-datagen') {
    apply plugin: 'application'
    apply plugin: 'com.github.johnrengelman.shadow'
    
    dependencies {
        implementation project(':models')
        implementation project(':flink-common')
        implementation "org.apache.flink:flink-java:${flinkVersion}"
        implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
        implementation "org.apache.flink:flink-connector-kafka:${flinkVersion}"
        implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5'
    }
    
    shadowJar {
        archiveClassifier.set('all')
        mergeServiceFiles()
    }
}

project(':flink-ecommerce-processor') {
    apply plugin: 'application'
    apply plugin: 'com.github.johnrengelman.shadow'
    
    dependencies {
        implementation project(':models')
        implementation "org.apache.flink:flink-java:${flinkVersion}"
        implementation "org.apache.flink:flink-streaming-java:${flinkVersion}"
        implementation "org.apache.flink:flink-connector-kafka:${flinkVersion}"
        implementation "org.apache.flink:flink-clients:${flinkVersion}"
        implementation "org.apache.flink:flink-json:${flinkVersion}"
    }
    
    application {
        mainClass = 'com.ververica.composable_job.flink.ecommerce.EcommerceEventProcessor'
    }
    
    shadowJar {
        archiveClassifier.set('all')
        mergeServiceFiles()
    }
}

// Clean task
tasks.register('cleanAll') {
    dependsOn subprojects.collect { it.tasks.clean }
    doLast {
        println 'All projects cleaned'
    }
}

// Build all task
tasks.register('buildAll') {
    dependsOn subprojects.collect { it.tasks.build }
    doLast {
        println 'All projects built successfully'
    }
}

// Task to show project info
tasks.register('projectInfo') {
    doLast {
        println "Project: ${project.name}"
        println "Version: ${project.version}"
        println "Java Version: ${javaVersion}"
        println ""
        println "Subprojects:"
        subprojects.each { sp ->
            println "  - ${sp.name}"
        }
    }
}

wrapper {
    gradleVersion = '8.14.1'
    distributionType = Wrapper.DistributionType.ALL
}