services:
  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v25.1.1
    container_name: redpanda
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --mode dev-container
      - --smp 1
      - --default-log-level=info
    volumes:
      - redpanda-data:/var/lib/redpanda/data
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -E 'Healthy:.*true' || exit 1"]
      interval: 15s
      timeout: 3s
      retries: 5
      start_period: 5s
  
  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:v3.0.0
    container_name: redpanda-console
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda:9092"]
        schemaRegistry:
          enabled: true
          urls: ["http://redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda:9644"]
    ports:
      - 8085:8080
    depends_on:
      redpanda:
        condition: service_healthy
  
  redpanda-init-topics:
    image: docker.redpanda.com/redpandadata/redpanda:v25.1.1
    depends_on:
      redpanda:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        rpk topic create websocket_fanout processing_fanout ecommerce_events ecommerce_processing_fanout product_updates recommendations inventory_updates shopping-cart-events basket-patterns product-recommendations -X brokers=redpanda:9092
        echo "Topics created successfully"

  quarkus-api:
    image: quay.io/quarkus/ubi-quarkus-native-binary-s2i:2.0
    container_name: quarkus-api
    build:
      context: ./quarkus-api
      dockerfile: src/main/docker/Dockerfile.jvm
    environment:
      KAFKA_BOOTSTRAP_SERVERS: redpanda:9092
      QUARKUS_HTTP_HOST: 0.0.0.0
      QUARKUS_HTTP_PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      redpanda:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/q/health/ready"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    volumes:
      - ./kartshoppe-frontend:/app/kartshoppe-frontend:ro

  postgres:
    image: postgres:15-alpine
    container_name: postgres-cdc
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      # CDC Configuration
#      POSTGRES_INITDB_ARGS: "-c wal_level=logical"
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_replication_slots=10"
      - "-c"
      - "max_wal_senders=10"
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=256MB"
      - "-c"
      - "max_slot_wal_keep_size=1GB"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # NOTE: Init script is executed automatically by startup scripts using docker exec
      # This avoids Docker Desktop file sharing permission issues on macOS
      # - ./postgres-init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ecommerce"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

volumes:
  redpanda-data:
  postgres-data:
